<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/windows" default="build" basedir=".">

    <!-- ==================================================================== -->
    <!-- Load the environment variables into our properties                   -->
    <!-- ==================================================================== -->
    <property environment="env" />
    
    <!-- ==================================================================== -->
    <!-- Generate a time stamp for further use in build targets               -->
    <!-- ==================================================================== --> 
    <tstamp>
        <format property="time.stamp" pattern="yyyy-MM-dd_HHmmss"/>
    </tstamp>
    
    <!-- ==================================================================== -->
    <!-- Create some basic properties which we need for further processing.   -->
    <!-- ==================================================================== -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="target.dir" value="${basedir}/target"/>

    <!-- ==================================================================== -->
    <!-- Load all property files in the right order                           -->
    <!-- ==================================================================== -->
    <property file="${basedir}/build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>

    <!-- ==================================================================== -->
    <!-- Cleans the directories with the generated source files               -->
    <!-- ==================================================================== -->
    <target name="clean" description="Cleans build directory in preparation for new build.">
        <delete dir="${target.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares all the required directories                                -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean" description="Prepares all the required directories.">
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${target.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Check if appserver-io/appserver sources has been downloaded yet      -->
    <!-- ==================================================================== -->
    <target name="check-appserver-sources-present" description="Check if appserver-io/appserver sources has been downloaded yet.">
        <available file="${lib.dir}/${appserver.package.name}" property="appserver-sources.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get appserver-io/appserver source package by given version number    -->
    <!-- ==================================================================== -->
    <target name="get-appserver-sources" depends="check-appserver-sources-present" unless="appserver-sources.present" description="Get appserver-io/appserver sourche package by given version number.">
        <get src="${appserver.download.url}" dest="${lib.dir}/${appserver.package.name}"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if appserver-io-php/runtime has been downloaded yet            -->
    <!-- ==================================================================== -->
    <target name="check-runtime-present" description="Check if appserver-io-php/runtime has been downloaded yet.">
        <available file="${lib.dir}/${runtime.package.name}" property="runtime.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get appserver-io/runtime package by given version number             -->
    <!-- ==================================================================== -->
    <target name="get-runtime" depends="check-runtime-present" unless="runtime.present" description="Get appserver-io/runtime package by given version number.">
        <get src="${runtime.download.url}" dest="${lib.dir}/${runtime.package.name}"/>
    </target>
	
    <!-- ==================================================================== -->
    <!-- Prepares the appserver sources                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-runtime" description="Prepares the appserver sources">
        <!-- download the appserver-io-php/runtime package -->
        <antcall target="get-runtime" />
        <!-- extract the runtime -->
        <unzip src="${lib.dir}/${runtime.package.name}" dest="${target.dir}"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the appserver sources                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-sources" description="Prepares the appserver sources">
        <!-- download the appserver-io/appserver package -->
        <antcall target="get-appserver-sources" />
        <!-- extract the sources -->
        <unzip src="${lib.dir}/${appserver.package.name}" dest="${target.dir}" />
        <!-- copy runtime sources to target directory -->
        <copy todir="${target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${target.dir}/appserver-${appserver.version}">
                <include name="**/*" />
            </fileset>
        </copy>
        <!-- install the libraries -->
        <exec dir="${target.dir}/appserver" executable="${target.dir}/appserver/php/php">
            <arg line="${target.dir}/appserver/bin/composer.phar install"/>
        </exec> 
	</target>

    <!-- ==================================================================== -->
    <!-- Get the latest versions of the default webapps                       -->
    <!-- ==================================================================== -->
    <target name="get-default-webapps" description="Get the latest versions of the default webapps">
        <get src="${webapps.download.baseurl}${webapps.name.example}/${webapps.name.example}-${webapps.version.example}.phar" dest="${target.dir}/${webapps.name.example}.phar" usetimestamp="true"/>
    </target>
	
    <!-- ==================================================================== -->
    <!-- Deploys the appserver.io default webapps                             -->
    <!-- ==================================================================== -->
    <target name="deploy-default-webapps" depends="get-default-webapps" description="Deploys the ApplicationServer default webapps.">
        <copy todir="${target.dir}/appserver/deploy">
            <fileset dir="${target.dir}">
                <include name="*.phar"/>
            </fileset>
        </copy>
        <touch file="foo">
            <fileset dir="${target.dir}/appserver/deploy">
                <include name="*.phar"/>
            </fileset>
            <globmapper from="*.phar" to="${target.dir}/appserver/deploy/*.phar.dodeploy"/>
        </touch>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates the IzPack installer JAR file 					      		  -->
    <!-- ==================================================================== -->
    <target name="build" description="Creates the IzPack installer JAR file.">
        <!-- prepare the build environment -->
        <antcall target="prepare" />
        <!-- prepare the appserver runtime -->
        <antcall target="prepare-runtime" />
        <!-- prepare the appserver sources -->
        <antcall target="prepare-sources" />
        <!-- deploy the applications -->
        <antcall target="deploy-default-webapps" />
        <!-- copy windows related files to the target directory -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*"/>
                <exclude name="appserver-izpack.xml"/>
            </fileset>
        </copy>
        <!-- copy runtime sources to target directory -->
        <copy todir="${target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${src.dir}/${os.architecture}">
                <include name="**/*" />
            </fileset>
        </copy>
        <!-- copy IzPack configuration + .bat files to the target directory -->
        <copy todir="${target.dir}" file="${src.dir}/appserver-izpack.xml">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- extend the classpath with the IzPack JAR's -->
        <path id="build.classpath">
            <fileset dir="${izpack.installation.dir}">
                <include name="lib/*.jar" />
            </fileset>
        </path>
        <!-- declare the IzPack task -->
        <taskdef name="izpack" classpathref="build.classpath" classname="com.izforge.izpack.ant.IzPackTask" />
        <!-- create the IzPack installer JAR file -->
        <izpack input="${target.dir}/appserver-izpack.xml"
                output="${package.specific-dir}/${package.name}"
                installerType="standard"
                inheritAll="true"
                basedir="${package.specific-dir}"
                izPackDir=" ${izpack.installation.dir}" />
    </target>
    
    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="copy-to-hub" description="Copies any built package to the snapshot hosting server.">
        <echo message="Now try to upload ${package.specific-dir}/${package.name} to snapshot server"/>
        <scp file="${package.specific-dir}/${package.name}" todir="${hub.scp-user}@${hub.address}:${hub.snapshot-path}" keyfile="${user.home}/.ssh/id_rsa" />
    </target>

</project>
