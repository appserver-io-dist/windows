<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/windows" default="build" basedir=".">

    <!-- ==================================================================== -->
    <!-- Load the environment variables into our properties                   -->
    <!-- ==================================================================== -->
    <property environment="env" />
    
    <!-- ==================================================================== -->
    <!-- Generate a time stamp for further use in build targets               -->
    <!-- ==================================================================== --> 
    <tstamp>
        <format property="time.stamp" pattern="yyyy-MM-dd_HHmmss"/>
    </tstamp>
    
    <!-- ==================================================================== -->
    <!-- Create some basic properties which we need for further processing.   -->
    <!-- ==================================================================== -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="target.dir" value="${basedir}/target"/>

    <!-- ==================================================================== -->
    <!-- Load all property files in the right order                           -->
    <!-- ==================================================================== -->
    <property file="${basedir}/build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>

    <!-- ==================================================================== -->
    <!-- Cleans the directories with the generated source files               -->
    <!-- ==================================================================== -->
    <target name="clean" description="Cleans build directory in preparation for new build.">
        <delete dir="${target.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares all the required directories                                -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean" description="Prepares all the required directories.">
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${target.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Check if appserver-io-php/runtime has been downloaded yet            -->
    <!-- ==================================================================== -->
    <target name="check-runtime-present" description="Check if appserver-io-php/runtime has been downloaded yet.">
        <available file="${lib.dir}/${runtime.package.name}" property="runtime.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get appserver-io/runtime package by given version number             -->
    <!-- ==================================================================== -->
    <target name="get-runtime" depends="check-runtime-present" unless="runtime.present" description="Get appserver-io/runtime package by given version number.">
        <get src="${runtime.download.url}" dest="${target.dir}/${runtime.package.name}"/>
    </target>
	
    <!-- ==================================================================== -->
    <!-- Prepares the appserver sources                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-runtime" description="Prepares the appserver sources">
        <!-- download the appserver-io-php/runtime package -->
        <antcall target="get-runtime" />
        <!-- extract the runtime -->
        <unzip src="${target.dir}/${runtime.package.name}" dest="${target.dir}"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the appserver sources                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-sources" description="Prepares the appserver sources">
        <exec dir="${target.dir}" executable="git">
          <arg line="clone https://${github.oauth.token}:x-oauth-basic@github.com/${appserver.src.repo} appserver-src" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Get the latest versions of the default webapps                       -->
    <!-- ==================================================================== -->
    <target name="get-default-webapps" description="Get the latest versions of the default webapps">
        <get src="${webapps.download.baseurl}${webapps.name.example}/${webapps.name.example}-${webapps.version.example}.phar" dest="${target.dir}/${webapps.name.example}.phar" usetimestamp="true"/>
    </target>
	
    <!-- ==================================================================== -->
    <!-- Deploys the appserver.io default webapps                             -->
    <!-- ==================================================================== -->
    <target name="deploy-default-webapps" depends="get-default-webapps" description="Deploys the ApplicationServer default webapps.">
        <copy todir="${target.dir}/appserver/deploy">
            <fileset dir="${target.dir}">
                <include name="*.phar"/>
            </fileset>
        </copy>
        <touch file="foo">
            <fileset dir="${target.dir}/appserver/deploy">
                <include name="*.phar"/>
            </fileset>
            <globmapper from="*.phar" to="${target.dir}/appserver/deploy/*.phar.dodeploy"/>
        </touch>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates the IzPack installer JAR file                                -->
    <!-- ==================================================================== -->
    <target name="build" description="Creates the IzPack installer JAR file.">

        <!-- prepare the build environment -->
        <antcall target="prepare" />
        <!-- prepare the appserver runtime -->
        <antcall target="prepare-runtime" />
        <!-- prepare the appserver sources -->
        <antcall target="prepare-sources" />

        <!-- get lastest tag version -->
        <exec dir="${target.dir}/appserver-src" executable="git" outputProperty="appserver.src.git.tag">
          <arg line="describe --abbrev=0 --tags" />
        </exec>
        <property name="appserver.src.version" value="${appserver.src.git.tag}" />
        <!-- checkout lastest tag version -->
        <echo message="Checkout lastest tag version ${appserver.src.version}" />
        <exec dir="${target.dir}/appserver-src" executable="git">
          <arg line="checkout -q ${appserver.src.version}" />
        </exec>
        <!-- remove git db files -->
        <delete dir="${target.dir}/appserver-src/.git" includeemptydirs="true" />
        <!-- copy runtime sources to target directory -->
        <copy todir="${target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${target.dir}/appserver-src">
                <include name="**/*" />
            </fileset>
        </copy>
        <!-- install the libraries -->
        <exec dir="${target.dir}/appserver" executable="${target.dir}/appserver/php/php">
            <arg line="${target.dir}/appserver/php/composer.phar install --no-dev"/>
        </exec>

        <!-- deploy the applications -->
        <antcall target="deploy-default-webapps" />
        <!-- copy windows related files to the target directory -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*"/>
                <exclude name="appserver-izpack.xml"/>
            </fileset>
        </copy>
        <!-- copy runtime sources to target directory -->
        <copy todir="${target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${src.dir}/${os.architecture}">
                <include name="**/*" />
            </fileset>
        </copy>
        <!-- copy install resources to target directory -->
        <copy todir="${target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${src.dir}/dist">
                <include name="**/*" />
            </fileset>
        </copy>
        <!-- prepare the package name -->
        <property 
            name="package.name" 
            value="${build.name.prefix}-dist-${appserver.src.version}.${build.number}.${os.family}.${os.architecture}.${build.name.ext}" />
        <!-- create the IZPack installer JAR file -->
        <antcall target="pack" />
    </target>

    <!-- ==================================================================== -->
    <!-- Creates the IzPack installer JAR file                                -->
    <!-- ==================================================================== -->
    <target name="pack" description="Creates the IzPack installer JAR file.">
           <!-- copy IzPack configuration + .bat files to the target directory -->
            <copy todir="${target.dir}" file="${src.dir}/appserver-izpack.xml">
                <filterchain>
                    <expandproperties/>
                </filterchain>
            </copy>
            <!-- extend the classpath with the IzPack JAR's -->
            <path id="build.classpath">
                <fileset dir="${izpack.installation.dir}">
                    <include name="lib/*.jar" />
               </fileset>
            </path>
            <!-- declare the IzPack task -->
            <taskdef name="IzPack" classpath="${basedir}/lib/izpack-standalone-compiler-4.3.0.jar"
                     classname="com.izforge.izpack.ant.IzPackTask"/>
            <!-- create the IzPack installer JAR file -->
            <izpack input="${target.dir}/appserver-izpack.xml"
                    output="${target.dir}/${package.name}"
                    installerType="standard"
                    inheritAll="true"
                    basedir="${target.dir}"
                    izPackDir=" ${izpack.installation.dir}" />
    </target>
    
    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="copy-to-hub" description="Copies any built package to the snapshot hosting server.">
        <echo message="Now try to upload build artefacts to snapshot server"/>
        <scp todir="${build.server.user}@${build.server.host}:${build.server.upload-path}" keyfile="${user.home}/.ssh/id_rsa" >
            <fileset file="${package.specific-dir}" >
                <include name="*.${build.name.ext}"/>
            </fileset>
        </scp>
    </target>

</project>
